import os
import sys
import glob
def dex2jar():
	num = 0
	for a in glob.glob('APKFiles/*'):
		num = num + 1
		print "dex2jar tool is working" + str(num)
		try:
			print "#################dex2jarStart#########################"
			directory = "JarFilesofAPKFiles/"
			if not os.path.exists(directory):
				os.makedirs(directory)
			x="dex2jar.bat -d "+str(a)
			os.system(x)
			print "#################dex2jarEnd###########################"		
		except:
			print " \n \n***** Error in File *********", a ,"\n \n"

def jarFileReplacement():
	directory = "JarFilesofAPKFiles"
	num = 0
	for a in glob.glob('APKFiles/*.jar'):
		num = num + 1
		print str(num)
		try:
			if not os.path.exists(directory):
				os.makedirs(directory)
			x="move "+str(a)+" JarFilesofAPKFiles/" 
			print str(x)
			os.system(x)
			print "#################dex file transfer########################"		
		except:
			print " \n \n******* Error in File ***********", a ,"\n \n"

def jadax():
	n = 0
	for a in glob.glob('JarFilesofAPKFiles/*.jar'):
		n = n+1
		print "jd-gui tool is working"
		try:
			b=a[19:len(a)-12]
			print str(b)+" "+str(n)
			directory = "Code/"+str(b)
			if not os.path.exists(directory):
				os.makedirs(directory)
			x="jadx -d "+str(directory)+" "+str(a)
			os.system(x)
			
			print "*******************************"
			print "str(b) :"+str(b)
			print "*******************************"
			print "str(x) :"+str(x)
			print "*******************************"
			
			os.system('cls')
			com="move "+str(a)+" JarFilesReplace/"
			os.system(com)
			print str(com)
			print "*******************************"
		except:
			print " \n \n***** Error in File *********", a ,"\n \n"
	
			
import fnmatch
import ssdeep
import csv

def directoryPath():
	matches = []
	for root, dirnames, filenames in os.walk('Code\\'):
		for filename in fnmatch.filter(filenames, '*.java'):
			matches.append(os.path.join(root, filename))
	return matches
	
def crateJobPool():
	num = 0
	for p in directoryPath():
		x = p.split('\\')
		path='JobPool/'+x[1]+'_Code.txt'
		try:
			f=open(path,"a+")
			f2=open(p, "r")
			if f2.mode == "r":
				contents = f2.read()
				f.write(contents)
				num = num + 1
				print str(num)
			f.close()
			f2.close()
		except FileNotFoundError:
			print('File does not exist')
		
def removeDuplicate(list_a):
	return {(i, j, k) for i, j, k in list_a}
	
def createPackageSSDEEPList():
	md5hash = ''
	package = ''
	list_package = []
	for p in directoryPath():
		y = p.split('\\')
		size = len(y) - 1 # because of three values 
		md5hash = y[2]
		count = 2;
		package1 = ''
		#re-write the package name and md5 hash algo 
		while (count < size):
			package1 = package1 + y[count] + '.'
			count = count + 1
		if package != package1 and md5hash != y[1]:
			package = package1
			md5hash = y[1]
			path = 'JobPool/'+md5hash+'_Code.txt'
			hash = ssdeep.hash_from_file(path)
			list_package += [[md5hash,package,hash]]
		package = ''
		print str(package1)
	myFile = open('Results.csv', 'wb')  
	with myFile:
		myFields = ['MD5', 'Package', 'SSDEEP']
		writer = csv.DictWriter(myFile, fieldnames=myFields)    
		writer.writeheader()
		
		set_a = removeDuplicate(list_package)
		for z in set_a:
			writer.writerow({'MD5' : str(z[0]), 'Package' : str(z[1]), 'SSDEEP' : str(z[2])})
			print 'MD5 : '+ str(z[0]) + ' Package : '+ str(z[1]) +' SSDEEP : '+ str(z[2])
	
def main():
	dex2jar()
	jarFileReplacement()
	jadax()
	crateJobPool()
	createPackageSSDEEPList()
	
if __name__ == '__main__':
	main()